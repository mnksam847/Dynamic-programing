
	public static int fib(int n) {
		if (n == 0 || n == 1) {
			return n;
		}

		int n1 = fib(n - 1);
		int n2 = fib(n - 2);
		int fn = n1 + n2;

		return fn;

	}
  
  
 //Topdown Approch

// T:o(n)  ,S: O(n)
	public static long fibTD(int n) {


		long[] array = new long[n + 1];

		if (n == 0 || n == 1) {
			return n;
		}
		if (array[n] != 0) { // reuse for avoiding extracalls
			return array[n];
		}
		long n1 = fibTD(n - 1);
		long n2 = fibTD(n - 2);
		long fn = n1 + n2;
		array[n] = fn; // Store value for reusing

		return fn;
	}

//   T:o(n)  ,S: O(n);
//bottom up approch
	public static int fibBU(int n) {

		int[] array = new int[n + 1];

		array[0] = 0;
		array[1] = 1;
		for (int i = 2; i <= n; i++) {
			array[i] = array[i - 1] + array[i - 2];
		}
		int fn = array[n];
		return fn;

	}
